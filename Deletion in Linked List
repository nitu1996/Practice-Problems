#include<iostream>
#include<cstdlib>
using namespace std;

struct Node
{
	int data;
	struct Node *next;
};

void LinkedListTreversal(struct Node *ptr)
{
	while(ptr!=NULL)
	{
	cout<<ptr->data<<endl;
	ptr=ptr->next;
	}
}

struct Node * deletefirstlink(struct Node *head)
{
	struct Node * ptr = head;
	head=head->next;
	free(ptr);
	return head;
}

struct Node * deleteatindex(struct Node *head,int index)
{
	struct Node *p=head;
	struct Node *q=head->next;
	for(int i=0; i<index-1; i++)
	{
		p=p->next;
		q=q->next;
	}
	p->next = q->next;
	free(q);
	return head;
	
}

struct Node * deleteatlast(struct Node *head)
{
	struct Node *p=head;
	struct Node *q=head->next;
	while(q->next!=NULL)
	{
		p=p->next;
		q=q->next;
	}
	p->next = NULL;
	free(q);
	return head;
}

struct Node * deleteatvalue(struct Node *head,int value)
{
	struct Node *p=head;
	struct Node *q=head->next;
	
	while(q->data!=value&& q->next!=NULL)
	{
		p=p->next;
		q=q->next;
	}
	if(q->data == value)
	{
		p->next=q->next;
		free(q);
	}
	return head;
}


int main()
{
	struct Node *head;
    struct Node *second;
    struct Node *third;
    struct Node *fourth;

    // Allocate memory for nodes in the linked list in Heap
    head = (struct Node *)malloc(sizeof(struct Node));
    second = (struct Node *)malloc(sizeof(struct Node));
    third = (struct Node *)malloc(sizeof(struct Node));
    fourth = (struct Node *)malloc(sizeof(struct Node));

    // Link first and second nodes
    head->data = 4;
    head->next = second;

    // Link second and third nodes
    second->data = 3;
    second->next = third;

    // Link third and fourth nodes
    third->data = 8;
    third->next = fourth;

    // Terminate the list at the third node
    fourth->data = 1;
    fourth->next = NULL;

    printf("Linked list before deletion\n");
    LinkedListTreversal(head);

    //head = deletefirstlink(head); // For deleting first element of the linked list
    //head = deleteatindex(head, 2);
    //head = deleteatlast(head);
    cout<<"Linked list after deletion"<<endl;
    LinkedListTreversal(head);

    return 0;
}
